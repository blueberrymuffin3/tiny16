FORMAT_BYTE_DECIMAL_UNSIGNED      := 0x0E
FORMAT_BYTE_DECIMAL_SIGNED        := 0x0F
FORMAT_BYTE_HEX                   := 0x10
FORMAT_BYTE_HEX_NYBBLE            := 0x11
FORMAT_BYTE_STRING_BYTE           := 0x12
FORMAT_BYTE_STRING_WORD           := 0x13
FORMAT_BYTE_CHAR                  := 0x14


CHAR_PERCENT := 0x25
CHAR_BACKSLASH := 0x5C
CHAR_a := 0x61
CHAR_b := 0x62
CHAR_c := 0x63
CHAR_d := 0x64
CHAR_e := 0x65
CHAR_n := 0x6E
CHAR_r := 0x72
CHAR_s := 0x73
CHAR_u := 0x75
CHAR_w := 0x77
CHAR_x := 0x78

nodbg

macro format_string args&
  local source_buffer, source_buffer_size, flag_fmt, flag_esc, flag_fmt_unsigned, flag_fmt_word, flag_fmt_byte, flag_index, last_index, char
  
  virtual at 0
    source_buffer::
    db args
    source_buffer_size:
  end virtual

  flag_fmt = 0
  flag_fmt_unsigned = 0
  flag_fmt_word = 0
  flag_fmt_byte = 0
  flag_esc = 0
  last_index = -1
  flag_index = -1

  repeat source_buffer_size, source_index:0
    load char:byte from source_buffer:source_index

    if flag_esc = 1
      if char = CHAR_BACKSLASH
        db char
      else if char = CHAR_a
        db 0x07 ; BEL
      else if char = CHAR_b
        db 0x08 ; BS
      else if char = CHAR_e
        db 0x1B ; ESC
      else if char = CHAR_n
        db 0x0A ; LF
      else if char = CHAR_r
        db 0x0D ; CR
      end if
      flag_esc = 0
    else if flag_fmt = 1
      if char = CHAR_u
        flag_fmt_unsigned = 1
      else if char = CHAR_w
        flag_fmt_word = 1
      else if char = CHAR_b
        flag_fmt_byte = 1
      else if char >= 0x30 & char <= 0x39
        if flag_index < 0
          flag_index = 0
        end if
        flag_index = flag_index * 10
        flag_index = flag_index + (char - 0x30)
      else
        if char = CHAR_PERCENT
          db char
        else if char = CHAR_d
          if flag_fmt_unsigned = 1
            db FORMAT_BYTE_DECIMAL_UNSIGNED
          else
            db FORMAT_BYTE_DECIMAL_SIGNED
          end if
        else if char = CHAR_x
          if flag_fmt_byte = 1
            db FORMAT_BYTE_HEX_NYBBLE
          else
            db FORMAT_BYTE_HEX
          end if
        else if char = CHAR_s
          if flag_fmt_word = 1
            db FORMAT_BYTE_STRING_WORD
          else if flag_fmt_byte = 1
            db FORMAT_BYTE_STRING_BYTE
          else
            error "Please specify word (%ws) or unsigned (%bs)"
          end if
        else if char = CHAR_c
          db FORMAT_BYTE_CHAR
        else
          error "Unknown format char """, char, """"
        end if

        if char <> CHAR_PERCENT
          ; Emit index byte
          if flag_index < 0
            flag_index = last_index + 1
          end if
          
          db flag_index * 2

          last_index = flag_index
        end if

        flag_fmt = 0
        flag_fmt_unsigned = 0
        flag_fmt_word = 0
        flag_fmt_byte = 0
        flag_index = -1
      end if
    else
      if char = CHAR_PERCENT
        flag_fmt = 1
      else if char = CHAR_BACKSLASH
        flag_esc = 1
      else
        db char
      end if
    end if
  end repeat

  if flag_fmt <> 0
    error "Format string ended with unfinished specifier"
  end if

  if flag_fmt <> 0
    error "Format string ended with unfinished escape code"
  end if

  db 0
end macro
dbg

proc printf
  ; Args:
  ;   r1: format
  ;   stack: vargs
  ; Vars:
  ;   r8: format cursor - 1
  ;   r9: console_addr
  ; Returns:
  ;   r1: return
    subi sp, sp, 6
    str lr, sp, 0
    str r8, sp, 2
    str r9, sp, 4
    subi r8, r1, 1
    ldi r9, console_addr

  .loop:
    call .get_char
    ldi r7, FORMAT_BYTE_CHAR
    cmpr r2, r7
    bgt .normal
    cmpi r2, 0 ; Exit on null
    beq .exit
    cmpi r2, FORMAT_BYTE_DECIMAL_UNSIGNED
    blt .normal

    ; dynamic call:
    mov r3, r2      ; Save format char
    call .get_char  ; Get index char
    addr r2, r2, sp
    ldr r1, r2, 6
    ldi lr, .loop
    subi r3, r3, FORMAT_BYTE_DECIMAL_UNSIGNED
    addr r3, r3, r3
    addr r3, pc, r3
    ldr pc, r3, 4
    dw console_print_word_unsigned - 2
    dw console_print_word_signed - 2
    dw console_print_word_hex - 2
    dw console_print_nybble_hex - 2
    dw console_print_byte_string - 2
    dw console_print_word_string - 2
    dw .print_char - 2

  .normal:
    str r2, r9, console_offset_io
    b .loop

  .get_char:
    addi r8, r8,  1
    andi r0, r8, 1
    bne .get_char_odd
    ldr r2, r8, 0
    ldui r2, 0
    ret
  .get_char_odd:
    subi r1, r8, 1
    ldr r2, r1, 0
    shri r2, r2, 8
    ret

  .exit:
    ldr lr, sp, 0
    ldr r8, sp, 2
    ldr r9, sp, 4
    addi sp, sp, 6
    ret
  
  .print_char:
    str r1, r9, console_offset_io
    b .loop
end proc
